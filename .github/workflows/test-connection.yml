name: Test Server Connection

# 手动触发测试
on:
  workflow_dispatch:
    inputs:
      test_type:
        description: '选择测试类型'
        required: true
        default: 'connection'
        type: choice
        options:
        - connection
        - file_transfer
        - full_test

# 环境变量
env:
  DEPLOY_PATH: '/opt/1panel/apps/openresty/openresty/www/sites/xn--ldry53fxxejua/index'
  TEST_FILE_NAME: 'test_deployment.txt'

jobs:
  # 测试服务器连接
  test-connection:
    name: Test Server Connection
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'connection' || github.event.inputs.test_type == 'full_test'
    
    steps:
      - name: Test SSH Connection 🔗
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          script: |
            echo "🔗 Testing SSH connection..."
            echo "📋 Server info:"
            echo "  - Hostname: $(hostname)"
            echo "  - Current user: $(whoami)"
            echo "  - Current directory: $(pwd)"
            echo "  - System: $(uname -a)"
            echo "  - Disk space: $(df -h /)"
            
            echo "\n📂 Testing target directory access..."
            echo "  - Target path: ${{ env.DEPLOY_PATH }}"
            
            # 测试目录权限
            if [ -d "${{ env.DEPLOY_PATH }}" ]; then
              echo "  ✅ Directory exists"
              echo "  - Permissions: $(ls -ld ${{ env.DEPLOY_PATH }})"
              echo "  - Contents: $(ls -la ${{ env.DEPLOY_PATH }}/ | wc -l) items"
            else
              echo "  ⚠️ Directory does not exist, will create..."
              mkdir -p ${{ env.DEPLOY_PATH }}
              echo "  ✅ Directory created successfully"
            fi
            
            # 测试写入权限
            TEST_FILE="${{ env.DEPLOY_PATH }}/${{ env.TEST_FILE_NAME }}"
            echo "Testing write permissions..." > "$TEST_FILE"
            if [ -f "$TEST_FILE" ]; then
              echo "  ✅ Write permission confirmed"
              rm "$TEST_FILE"
            else
              echo "  ❌ Write permission denied"
              exit 1
            fi
            
            echo "\n🎉 SSH connection test completed successfully!"

  # 测试文件传输
  test-file-transfer:
    name: Test File Transfer
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'file_transfer' || github.event.inputs.test_type == 'full_test'
    
    steps:
      # 创建测试文件
      - name: Create Test Files 📝
        run: |
          echo "🔧 Creating test files..."
          mkdir -p test_files
          
          # 创建多个测试文件
          echo "Hello from GitHub Actions! $(date)" > test_files/test1.txt
          echo "This is a test deployment file." > test_files/test2.txt
          echo '{"message": "Test JSON file", "timestamp": "'$(date -Iseconds)'"}' > test_files/test.json
          
          # 创建一个简单的HTML文件
          cat > test_files/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Deployment Test</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  .success { color: green; }
              </style>
          </head>
          <body>
              <h1 class="success">🎉 Deployment Test Successful!</h1>
              <p>This file was deployed via GitHub Actions</p>
              <p>Deployment time: <script>document.write(new Date().toLocaleString());</script></p>
          </body>
          </html>
          EOF
          
          echo "📋 Created test files:"
          ls -la test_files/
          echo "📊 Total size: $(du -sh test_files/)"

      # 准备服务器测试目录
      - name: Prepare Test Directory 🗂️
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          script: |
            echo "🗂️ Preparing test directory..."
            
            TEST_DIR="${{ env.DEPLOY_PATH }}/test_$(date +%Y%m%d_%H%M%S)"
            echo "📂 Test directory: $TEST_DIR"
            
            # 创建测试目录
            mkdir -p "$TEST_DIR"
            echo "✅ Test directory created"
            
            # 保存测试目录路径供后续步骤使用
            echo "TEST_DIR=$TEST_DIR" >> $GITHUB_ENV

      # 传输测试文件
      - name: Transfer Test Files 📤
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          source: "test_files/*"
          target: "${{ env.DEPLOY_PATH }}/test_$(date +%Y%m%d_%H%M%S)/"
          strip_components: 1
          overwrite: true

      # 验证文件传输
      - name: Verify File Transfer 🔍
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          script: |
            echo "🔍 Verifying file transfer..."
            
            # 查找最新的测试目录
            LATEST_TEST_DIR=$(ls -td ${{ env.DEPLOY_PATH }}/test_* | head -n 1)
            echo "📂 Checking directory: $LATEST_TEST_DIR"
            
            if [ -d "$LATEST_TEST_DIR" ]; then
              echo "✅ Test directory found"
              echo "📋 Transferred files:"
              ls -la "$LATEST_TEST_DIR"/
              
              echo "\n📄 File contents verification:"
              
              # 验证文本文件
              if [ -f "$LATEST_TEST_DIR/test1.txt" ]; then
                echo "  ✅ test1.txt: $(cat $LATEST_TEST_DIR/test1.txt)"
              else
                echo "  ❌ test1.txt not found"
              fi
              
              # 验证JSON文件
              if [ -f "$LATEST_TEST_DIR/test.json" ]; then
                echo "  ✅ test.json: $(cat $LATEST_TEST_DIR/test.json)"
              else
                echo "  ❌ test.json not found"
              fi
              
              # 验证HTML文件
              if [ -f "$LATEST_TEST_DIR/index.html" ]; then
                echo "  ✅ index.html: $(wc -l < $LATEST_TEST_DIR/index.html) lines"
              else
                echo "  ❌ index.html not found"
              fi
              
              echo "\n📊 Transfer summary:"
              echo "  - Total files: $(find $LATEST_TEST_DIR -type f | wc -l)"
              echo "  - Total size: $(du -sh $LATEST_TEST_DIR | cut -f1)"
              
              echo "\n🎉 File transfer test completed successfully!"
              
              # 清理测试文件（可选）
              echo "\n🧹 Cleaning up test files..."
              rm -rf "$LATEST_TEST_DIR"
              echo "✅ Test files cleaned up"
              
            else
              echo "❌ Test directory not found - transfer failed"
              exit 1
            fi

  # 测试结果汇总
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-connection, test-file-transfer]
    if: always()
    
    steps:
      - name: Generate Test Report 📊
        run: |
          echo "📊 Test Summary Report"
          echo "====================="
          echo "Test Type: ${{ github.event.inputs.test_type }}"
          echo "Execution Time: $(date)"
          echo ""
          
          # 检查各个作业的状态
          CONNECTION_STATUS="${{ needs.test-connection.result }}"
          TRANSFER_STATUS="${{ needs.test-file-transfer.result }}"
          
          echo "📋 Test Results:"
          
          if [ "$CONNECTION_STATUS" = "success" ]; then
            echo "  ✅ Server Connection: PASSED"
          elif [ "$CONNECTION_STATUS" = "skipped" ]; then
            echo "  ⏭️ Server Connection: SKIPPED"
          else
            echo "  ❌ Server Connection: FAILED"
          fi
          
          if [ "$TRANSFER_STATUS" = "success" ]; then
            echo "  ✅ File Transfer: PASSED"
          elif [ "$TRANSFER_STATUS" = "skipped" ]; then
            echo "  ⏭️ File Transfer: SKIPPED"
          else
            echo "  ❌ File Transfer: FAILED"
          fi
          
          echo ""
          
          # 总体状态
          if [ "$CONNECTION_STATUS" = "success" ] && [ "$TRANSFER_STATUS" = "success" ]; then
            echo "🎉 Overall Status: ALL TESTS PASSED"
            echo "✅ Your server configuration is working correctly!"
          elif [ "$CONNECTION_STATUS" = "success" ] || [ "$TRANSFER_STATUS" = "success" ]; then
            echo "⚠️ Overall Status: PARTIAL SUCCESS"
            echo "Some tests passed, please check the failed ones."
          else
            echo "❌ Overall Status: TESTS FAILED"
            echo "Please check your server configuration and secrets."
          fi
          
          echo ""
          echo "💡 Next Steps:"
          echo "  - If all tests passed, your main deployment workflow should work"
          echo "  - If tests failed, check your GitHub Secrets and server configuration"
          echo "  - Review the detailed logs above for specific error messages"