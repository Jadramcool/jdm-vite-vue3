name: Build and Deploy

# 触发条件：推送到 master 分支或手动触发
on:
  push:
    branches: [master]
  workflow_dispatch:

# 环境变量
env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'
  DEPLOY_PATH: '/opt/1panel/apps/openresty/openresty/www/sites/xn--ldry53fxxejua/index'

jobs:
  # 构建作业
  build:
    name: Build Project
    runs-on: ubuntu-latest
    
    steps:
      # 1. 检出代码
      - name: Checkout Repository 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录，用于版本标记

      # 2. 设置 pnpm
      - name: Setup pnpm 📦
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      # 3. 设置 Node.js 环境
      - name: Setup Node.js ${{ env.NODE_VERSION }} 🟢
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      # 4. 安装依赖
      - name: Install Dependencies 📥
        run: |
          echo "📋 pnpm version: $(pnpm --version)"
          echo "📋 Node.js version: $(node --version)"
          pnpm install --frozen-lockfile

      # 5. 代码质量检查（可选）
      - name: Code Quality Check 🔍
        run: |
          echo "🔍 Running linting..."
          pnpm run lint || echo "⚠️ Linting failed, but continuing..."

      # 6. 构建项目
      - name: Build Project 🏗️
        run: |
          echo "🏗️ Building project..."
          pnpm run build
          echo "✅ Build completed successfully"

      # 7. 验证构建产物
      - name: Verify Build Output 📋
        run: |
          echo "📋 Verifying build output..."
          ls -la dist/
          echo "📊 Build size:"
          du -sh dist/

      # 8. 上传构建产物
      - name: Upload Build Artifacts 📤
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # 部署作业
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
      # 1. 下载构建产物
      - name: Download Build Artifacts 📥
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      # 2. 验证下载的文件
      - name: Verify Downloaded Files 📋
        run: |
          echo "📋 Downloaded files:"
          ls -la dist/
          echo "📊 Total size:"
          du -sh dist/

      # 3. 准备服务器目录
      - name: Prepare Server Directory 🗂️
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          script: |
            echo "🗂️ Preparing deployment directory..."
            
            # 创建备份目录（如果不存在）
            mkdir -p ${{ env.DEPLOY_PATH }}/backup
            
            # 备份当前版本（如果存在）
            if [ -d "${{ env.DEPLOY_PATH }}/dist" ] && [ "$(ls -A ${{ env.DEPLOY_PATH }}/dist)" ]; then
              echo "💾 Backing up current version..."
              BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
              mv ${{ env.DEPLOY_PATH }}/dist ${{ env.DEPLOY_PATH }}/backup/$BACKUP_NAME
              echo "✅ Backup created: $BACKUP_NAME"
              
              # 保留最近5个备份
              cd ${{ env.DEPLOY_PATH }}/backup
              ls -t | tail -n +6 | xargs -r rm -rf
              echo "🧹 Old backups cleaned up"
            fi
            
            # 确保部署根目录存在
            mkdir -p ${{ env.DEPLOY_PATH }}
            echo "✅ Directory prepared successfully"

      # 4. 部署文件到服务器
      - name: Deploy Files to Server 🚀
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          source: "dist"
          target: ${{ env.DEPLOY_PATH }}/
          overwrite: true
          debug: true

      # 5. 立即检查文件传输结果
      - name: Check File Transfer 📋
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          script: |
            echo "📋 Checking file transfer immediately after scp..."
            echo "📍 Target path: ${{ env.DEPLOY_PATH }}/dist/"
            
            if [ -d "${{ env.DEPLOY_PATH }}/dist" ]; then
              echo "✅ Target directory exists"
              echo "📋 Directory contents:"
              ls -la ${{ env.DEPLOY_PATH }}/dist/
              echo "📊 File count: $(find ${{ env.DEPLOY_PATH }}/dist -type f | wc -l)"
            else
              echo "❌ Target directory does not exist"
              echo "📋 Parent directory contents:"
              ls -la ${{ env.DEPLOY_PATH }}/
            fi

      # 6. 验证部署结果
      - name: Verify Deployment 🔍
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          script: |
            echo "🔍 Verifying deployment..."
            echo "📍 Deploy path: ${{ env.DEPLOY_PATH }}"
            echo "📍 Target directory: ${{ env.DEPLOY_PATH }}/dist"
            
            # 检查部署路径是否存在
            if [ ! -d "${{ env.DEPLOY_PATH }}" ]; then
              echo "❌ Deploy path does not exist: ${{ env.DEPLOY_PATH }}"
              exit 1
            fi
            
            # 检查目标目录是否存在
            if [ ! -d "${{ env.DEPLOY_PATH }}/dist" ]; then
              echo "❌ Target directory does not exist: ${{ env.DEPLOY_PATH }}/dist"
              echo "📋 Contents of deploy path:"
              ls -la ${{ env.DEPLOY_PATH }}/
              exit 1
            fi
            
            # 检查文件是否存在
            if [ "$(ls -A ${{ env.DEPLOY_PATH }}/dist)" ]; then
              echo "✅ Files deployed successfully"
              echo "📋 Deployed files:"
              ls -la ${{ env.DEPLOY_PATH }}/dist/
              echo "📊 Total size:"
              du -sh ${{ env.DEPLOY_PATH }}/dist/
            else
              echo "❌ Target directory is empty: ${{ env.DEPLOY_PATH }}/dist"
              echo "📋 Directory permissions:"
              ls -ld ${{ env.DEPLOY_PATH }}/dist/
              exit 1
            fi
            
            # 设置正确的文件权限
            echo "🔧 Setting file permissions..."
            find ${{ env.DEPLOY_PATH }}/dist -type f -exec chmod 644 {} \;
            find ${{ env.DEPLOY_PATH }}/dist -type d -exec chmod 755 {} \;
            echo "✅ Permissions set successfully"

      # 7. 部署完成通知
      - name: Deployment Success Notification 🎉
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📅 Deployment time: $(date)"
          echo "🔗 Site should be available at your configured domain"

      # 8. 部署失败回滚
      - name: Rollback on Failure 🔄
        if: failure()
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DR_HOST }}
          username: ${{ secrets.DR_USER }}
          password: ${{ secrets.DR_PASS }}
          script: |
            echo "🔄 Deployment failed, attempting rollback..."
            
            # 查找最新的备份
            LATEST_BACKUP=$(ls -t ${{ env.DEPLOY_PATH }}/backup/ | head -n 1)
            
            if [ -n "$LATEST_BACKUP" ]; then
              echo "📦 Rolling back to: $LATEST_BACKUP"
              rm -rf ${{ env.DEPLOY_PATH }}/dist
              mv ${{ env.DEPLOY_PATH }}/backup/$LATEST_BACKUP ${{ env.DEPLOY_PATH }}/dist
              echo "✅ Rollback completed successfully"
            else
              echo "⚠️ No backup found for rollback"
            fi
